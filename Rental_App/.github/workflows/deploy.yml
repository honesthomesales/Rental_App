name: Deploy to GitHub Pages

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Node (NO CACHE so we don't require a lockfile upfront)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # 3) Create a root lockfile if missing so later steps won't choke
      - name: Ensure root lockfile exists
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for package.json..."
          find . -name "package.json" -type f
          
          # Navigate to the correct directory with package.json
          if [ -f "package.json" ]; then
            echo "Found package.json in current directory"
          elif [ -f "../package.json" ]; then
            echo "Found package.json in parent directory, moving up..."
            cd ..
          elif [ -f "Rental_App/package.json" ]; then
            echo "Found package.json in Rental_App subdirectory, moving there..."
            cd Rental_App
          else
            echo "ERROR: Cannot find package.json anywhere!"
            exit 1
          fi
          
          echo "Working directory: $(pwd)"
          echo "Package.json exists: $(ls -la package.json)"
          
          if [ ! -f package-lock.json ] && [ ! -f npm-shrinkwrap.json ] && [ ! -f yarn.lock ]; then
            echo "No lock file at repo root â€” generating package-lock.json"
            npm install --package-lock-only --no-audit --no-fund
          fi
          echo "Lockfile status at repo root:"
          ls -la | egrep "package-lock.json|npm-shrinkwrap.json|yarn.lock" || true

      # 4) Install dependencies in a monorepo-safe way (works with or without lockfile)
      - name: Install dependencies (monorepo-safe)
        shell: bash
        run: |
          echo "Node: $(node --version)"
          echo "NPM:  $(npm --version)"
          echo "Working directory: $(pwd)"
          
          # Make sure we're in the directory with package.json
          if [ ! -f "package.json" ]; then
            if [ -f "../package.json" ]; then
              cd ..
            elif [ -f "Rental_App/package.json" ]; then
              cd Rental_App
            fi
            echo "Moved to directory: $(pwd)"
          fi
          
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      # 5) Build packages first (skip if script doesn't exist)
      - name: Build packages (if present)
        shell: bash
        run: |
          if npm run | grep -q "build:packages"; then
            npm run build:packages
          else
            echo "No build:packages script at root; skipping."
          fi

      # 6) Build the Next.js web app (static export goes to apps/web/out)
      - name: Build web (Next export)
        working-directory: apps/web
        shell: bash
        run: |
          npm run clean || true
          npm run build

      # 7) Prepare Pages artifact: add SPA fallback and publish ONLY the export
      - name: Prepare Pages artifact
        shell: bash
        run: |
          # SPA fallback so deep links work on GH Pages
          cp apps/web/out/index.html apps/web/out/404.html
          # Publish ONLY the exported site
          rm -rf docs
          mkdir -p docs
          cp -r apps/web/out/* docs/

      # 8) Optional guardrail: block bad relative asset paths that cause double /Rental_App
      - name: Guard: forbid relative Rental_App/_next paths
        shell: bash
        run: |
          if grep -R --include="*.html" -n 'href="Rental_App/_next' docs || grep -R --include="*.html" -n 'src="Rental_App/_next' docs; then
            echo "ERROR: Relative Rental_App/_next paths detected. This would break on GH Pages."
            exit 1
          fi

      # 9) Upload the docs/ as the artifact for GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 10) Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
