name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repository structure
        run: |
          echo "=== REPOSITORY STRUCTURE DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Git remote:"
          git remote -v
          echo "Git branch:"
          git branch -a
          echo "Package files found:"
          find . -name "package*.json" -type f
          echo "Node modules:"
          ls -la node_modules 2>/dev/null || echo "No node_modules found"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json
            **/npm-shrinkwrap.json
            **/yarn.lock

      - name: Install dependencies (monorepo-safe)
        run: |
          echo "Node: $(node --version)"
          echo "NPM:  $(npm --version)"
          # If a lockfile exists, use npm ci for reproducible installs; otherwise, fall back to npm install.
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Verify dependencies
        run: |
          echo "=== VERIFYING DEPENDENCIES ==="
          echo "Root node_modules:"
          ls -la node_modules | head -10
          echo "Web app node_modules:"
          ls -la apps/web/node_modules 2>/dev/null | head -10 || echo "No web node_modules found"

      - name: Build packages
        run: |
          npm run build:packages

      - name: Build web (Next export)
        working-directory: apps/web
        run: |
          npm run clean
          npm run build

      - name: Guard: forbid double-prefixed asset paths
        run: |
          if grep -R --include="*.html" -n 'href="Rental_App/_next' apps/web/out || grep -R --include="*.html" -n 'src="Rental_App/_next' apps/web/out; then
            echo "ERROR: Relative Rental_App/_next paths detected."
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Pages artifact
        run: |
          cp apps/web/out/index.html apps/web/out/404.html
          rm -rf docs
          mkdir -p docs
          cp -r apps/web/out/* docs/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
