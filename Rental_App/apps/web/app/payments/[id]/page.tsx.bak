'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { TransactionsService } from '@rental-app/api'
import type { Transaction, Property, Tenant, Loan } from '@rental-app/api'
import { ArrowLeft, Edit, Trash2, DollarSign, Calendar, FileText, MapPin, User, Building } from 'lucide-react'
import Link from 'next/link'
import toast from 'react-hot-toast'

export default function TransactionDetailPage() {
  const params = useParams()
  const router = useRouter()
  const [transaction, setTransaction] = useState<Transaction | null>(null)
  const [property, setProperty] = useState<Property | null>(null)
  const [tenant, setTenant] = useState<Tenant | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (params.id) {
      loadTransaction(params.id as string)
    }
  }, [params.id])

  const loadTransaction = async (id: string) => {
    try {
      setLoading(true)
      const response = await TransactionsService.getById(id)
      
      if (response.success && response.data) {
        setTransaction(response.data)
        // Load related data if available
        if (response.data.property_id) {
          // Load property details
        }
        if (response.data.tenant_id) {
          // Load tenant details
        }
      } else {
        toast.error('Transaction not found')
        router.push('/payments')
      }
    } catch (error) {
      toast.error('Error loading transaction')
      router.push('/payments')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async () => {
    if (!transaction) return
    
    if (confirm('Are you sure you want to delete this transaction?')) {
      try {
        const response = await TransactionsService.delete(transaction.id)
        if (response.success) {
          toast.success('Transaction deleted successfully!')
          router.push('/payments')
        } else {
          toast.error('Failed to delete transaction')
        }
      } catch (error) {
        toast.error('Error deleting transaction')
      }
    }
  }

  const getTransactionTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case 'rent': return 'bg-green-100 text-green-800'
      case 'expense': return 'bg-red-100 text-red-800'
      case 'income': return 'bg-blue-100 text-blue-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getTransactionTypeLabel = (type: string) => {
    return type.charAt(0).toUpperCase() + type.slice(1)
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed': return 'bg-green-100 text-green-800'
      case 'pending': return 'bg-yellow-100 text-yellow-800'
      case 'failed': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  if (!transaction) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Transaction Not Found</h2>
          <button
            onClick={() => router.push('/payments')}
            className="btn btn-primary"
          >
            Back to Payments
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Link
              href="/payments"
              className="inline-flex items-center px-4 py-2 bg-white text-gray-700 rounded-md border border-gray-300 hover:bg-gray-50 transition-colors"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Payments
            </Link>
            <h1 className="text-3xl font-bold text-gray-900">Transaction Details</h1>
          </div>
          <div className="flex space-x-3">
            <Link
              href={`/payments/${transaction.id}/edit`}
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              <Edit className="w-4 h-4 mr-2" />
              Edit
            </Link>
            <button
              onClick={handleDelete}
              className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Delete
            </button>
          </div>
        </div>

        {/* Transaction Details */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Transaction Information</h2>
              <div className="space-y-3">
                <div className="flex items-center space-x-3">
                  <DollarSign className="w-5 h-5 text-gray-400" />
                  <span className="text-gray-600">Amount:</span>
                  <span className="font-semibold">${transaction.amount?.toFixed(2)}</span>
                </div>
                <div className="flex items-center space-x-3">
                  <Calendar className="w-5 h-5 text-gray-400" />
                  <span className="text-gray-600">Date:</span>
                  <span className="font-semibold">
                    {transaction.transaction_date ? new Date(transaction.transaction_date).toLocaleDateString() : 'N/A'}
                  </span>
                </div>
                <div className="flex items-center space-x-3">
                  <FileText className="w-5 h-5 text-gray-400" />
                  <span className="text-gray-600">Type:</span>
                  <span className={`px-2 py-1 rounded-full text-sm font-medium ${getTransactionTypeColor(transaction.transaction_type || '')}`}>
                    {getTransactionTypeLabel(transaction.transaction_type || '')}
                  </span>
                </div>
                <div className="flex items-center space-x-3">
                  <span className="text-gray-600">Status:</span>
                  <span className={`px-2 py-1 rounded-full text-sm font-medium ${getStatusColor(transaction.status || '')}`}>
                    {transaction.status || 'Unknown'}
                  </span>
                </div>
              </div>
            </div>
            
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Additional Details</h2>
              <div className="space-y-3">
                {transaction.description && (
                  <div>
                    <span className="text-gray-600">Description:</span>
                    <p className="text-gray-900 mt-1">{transaction.description}</p>
                  </div>
                )}
                {transaction.notes && (
                  <div>
                    <span className="text-gray-600">Notes:</span>
                    <p className="text-gray-900 mt-1">{transaction.notes}</p>
                  </div>
                )}
                {transaction.reference_number && (
                  <div>
                    <span className="text-gray-600">Reference:</span>
                    <span className="font-mono text-gray-900">{transaction.reference_number}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Related Information */}
        {(transaction.property_id || transaction.tenant_id) && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Related Information</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {transaction.property_id && (
                <div className="flex items-center space-x-3">
                  <Building className="w-5 h-5 text-gray-400" />
                  <span className="text-gray-600">Property ID:</span>
                  <span className="font-semibold">{transaction.property_id}</span>
                </div>
              )}
              {transaction.tenant_id && (
                <div className="flex items-center space-x-3">
                  <User className="w-5 h-5 text-gray-400" />
                  <span className="text-gray-600">Tenant ID:</span>
                  <span className="font-semibold">{transaction.tenant_id}</span>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
