


import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const NewJobScreen = ({ navigation }: any) => {
  const [jobData, setJobData] = useState({
    address: '',
    phone: '',
    email: '',
    description: '',
  });

  const [jobName, setJobName] = useState('');

  // Auto-generate job name from address and date
  useEffect(() => {
    if (jobData.address.trim()) {
      const today = new Date();
      const dateStr = today.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });
      
      // Extract street name from address (first part before comma or space)
      const addressParts = jobData.address.split(/[,\s]/);
      const streetName = addressParts[0] || 'Job';
      
      const generatedName = `${streetName} - ${dateStr}`;
      setJobName(generatedName);
    } else {
      setJobName('');
    }
  }, [jobData.address]);

  const handleSave = () => {
    if (!jobData.address.trim()) {
      Alert.alert('Required Field', 'Please enter the job address.');
      return;
    }

    if (!jobData.phone.trim() && !jobData.email.trim()) {
      Alert.alert('Contact Required', 'Please provide either a phone number or email address.');
      return;
    }

    const finalJobData = {
      ...jobData,
      name: jobName,
      createdAt: new Date().toISOString(),
    };

    // Here you would typically save to your backend
    console.log('Creating new job:', finalJobData);
    
    Alert.alert(
      'Job Created Successfully!',
      `Job "${jobName}" has been created.`,
      [
        {
          text: 'OK',
          onPress: () => navigation.goBack(),
        },
      ]
    );
  };

  const handleCancel = () => {
    Alert.alert(
      'Cancel Job Creation',
      'Are you sure you want to cancel? All data will be lost.',
      [
        { text: 'Keep Editing', style: 'cancel' },
        { text: 'Cancel', style: 'destructive', onPress: () => navigation.goBack() },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={handleCancel} style={styles.cancelButton}>
            <Text style={styles.cancelText}>Cancel</Text>
          </TouchableOpacity>
          <Text style={styles.title}>New Job</Text>
          <TouchableOpacity 
            onPress={handleSave} 
            style={[
              styles.saveButton,
              (!jobData.address.trim() || (!jobData.phone.trim() && !jobData.email.trim())) && styles.saveButtonDisabled
            ]}
            disabled={!jobData.address.trim() || (!jobData.phone.trim() && !jobData.email.trim())}
          >
            <Text style={styles.saveText}>Save</Text>
          </TouchableOpacity>
        </View>

        {/* Form */}
        <View style={styles.form}>
          {/* Auto-generated Job Name */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Job Name (Auto-generated)</Text>
            <View style={styles.autoGeneratedContainer}>
              <Text style={[
                styles.autoGeneratedText,
                { color: jobName ? '#1E293B' : '#9CA3AF', fontWeight: jobName ? '500' : '400' }
              ]}>
                {jobName || 'Enter address to generate job name...'}
              </Text>
            </View>
          </View>

          {/* Address */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Job Address *</Text>
            <TextInput
              style={styles.input}
              value={jobData.address}
              onChangeText={(text) => setJobData({ ...jobData, address: text })}
              placeholder="Enter the job site address"
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={2}
              textAlignVertical="top"
            />
          </View>

          {/* Contact Info */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Phone Number</Text>
            <TextInput
              style={styles.input}
              value={jobData.phone}
              onChangeText={(text) => setJobData({ ...jobData, phone: text })}
              placeholder="Enter phone number"
              placeholderTextColor="#9CA3AF"
              keyboardType="phone-pad"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Email Address</Text>
            <TextInput
              style={styles.input}
              value={jobData.email}
              onChangeText={(text) => setJobData({ ...jobData, email: text })}
              placeholder="Enter email address"
              placeholderTextColor="#9CA3AF"
              keyboardType="email-address"
              autoCapitalize="none"
              autoCorrect={false}
            />
          </View>

          {/* Description */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Job Description</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              value={jobData.description}
              onChangeText={(text) => setJobData({ ...jobData, description: text })}
              placeholder="Describe the work to be done, materials needed, special requirements..."
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={6}
              textAlignVertical="top"
            />
          </View>

          {/* Validation Info */}
          <View style={styles.validationInfo}>
            <Text style={styles.validationText}>
              * Address is required. Phone or email is required.
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  cancelButton: {
    padding: 8,
  },
  cancelText: {
    fontSize: 16,
    color: '#64748B',
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1E293B',
  },
  saveButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  saveButtonDisabled: {
    backgroundColor: '#CBD5E1',
  },
  saveText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  form: {
    padding: 20,
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#1F2937',
  },
  textArea: {
    height: 120,
    paddingTop: 12,
  },
  autoGeneratedContainer: {
    backgroundColor: '#F1F5F9',
    borderWidth: 1,
    borderColor: '#E2E8F0',
    borderRadius: 8,
    padding: 12,
    minHeight: 48,
    justifyContent: 'center',
  },
  autoGeneratedText: {
    fontSize: 16,
  },
  validationInfo: {
    backgroundColor: '#FEF3C7',
    borderWidth: 1,
    borderColor: '#FDE68A',
    borderRadius: 8,
    padding: 12,
    marginTop: 10,
  },
  validationText: {
    fontSize: 14,
    color: '#92400E',
    textAlign: 'center',
  },
});

export default NewJobScreen; 