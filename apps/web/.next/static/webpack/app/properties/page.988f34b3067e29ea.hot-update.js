"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/properties/page",{

/***/ "(app-pages-browser)/../../packages/api/dist/services/tenants.js":
/*!***************************************************!*\
  !*** ../../packages/api/dist/services/tenants.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TenantsService = void 0;\nconst client_1 = __webpack_require__(/*! ../client */ \"(app-pages-browser)/../../packages/api/dist/client.js\");\nclass TenantsService {\n    /**\n     * Get all tenants with optional filtering\n     */ static async getAll(filters) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            let query = supabase.from(\"RENT_tenants\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (filters === null || filters === void 0 ? void 0 : filters.property_id) {\n                query = query.eq(\"property_id\", filters.property_id);\n            }\n            if ((filters === null || filters === void 0 ? void 0 : filters.is_active) !== undefined) {\n                query = query.eq(\"is_active\", filters.is_active);\n            }\n            if (filters === null || filters === void 0 ? void 0 : filters.late_status) {\n                query = query.eq(\"late_status\", filters.late_status);\n            }\n            const { data: tenants, error } = await query;\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // Fetch properties and leases separately\n            const tenantsWithRelations = await Promise.all(tenants.map(async (tenant)=>{\n                // Fetch property\n                let property = null;\n                if (tenant.property_id) {\n                    const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address, notes, monthly_rent\").eq(\"id\", tenant.property_id).single();\n                    property = propData;\n                }\n                // Fetch leases\n                const { data: leasesData } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", tenant.id).order(\"lease_start_date\", {\n                    ascending: false\n                });\n                return {\n                    ...tenant,\n                    properties: property,\n                    leases: leasesData || []\n                };\n            }));\n            return (0, client_1.createApiResponse)(tenantsWithRelations);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Get a tenant by ID\n     */ static async getById(id) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const { data: tenant, error } = await supabase.from(\"RENT_tenants\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // Fetch property\n            let property = null;\n            if (tenant.property_id) {\n                const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address, notes, monthly_rent\").eq(\"id\", tenant.property_id).single();\n                property = propData;\n            }\n            // Fetch leases\n            const { data: leasesData } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", tenant.id).order(\"lease_start_date\", {\n                ascending: false\n            });\n            const tenantWithRelations = {\n                ...tenant,\n                properties: property,\n                leases: leasesData || []\n            };\n            return (0, client_1.createApiResponse)(tenantWithRelations);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Create a new tenant\n     */ static async create(tenantData) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            // Log the data being sent\n            console.log(\"TenantsService.create - Input data:\", tenantData);\n            // Only send the columns that actually exist in the RENT_tenants table\n            const insertData = {\n                property_id: tenantData.property_id,\n                first_name: tenantData.first_name,\n                last_name: tenantData.last_name,\n                email: tenantData.email,\n                phone: tenantData.phone,\n                monthly_rent: tenantData.monthly_rent,\n                lease_start_date: tenantData.lease_start_date,\n                lease_end_date: tenantData.lease_end_date,\n                notes: tenantData.notes\n            };\n            console.log(\"TenantsService.create - Insert data (filtered):\", insertData);\n            const { data, error } = await supabase.from(\"RENT_tenants\").insert([\n                insertData\n            ]).select(\"*\").single();\n            if (error) {\n                console.error(\"TenantsService.create - Supabase error:\", error);\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            console.log(\"TenantsService.create - Success, created tenant:\", data);\n            // Return simple response without additional data for now\n            return (0, client_1.createApiResponse)(data);\n        } catch (error) {\n            console.error(\"TenantsService.create - Unexpected error:\", error);\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Update an existing tenant\n     */ static async update(id, tenantData) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            // Log the update data for debugging\n            console.log(\"TenantsService.update - Updating tenant:\", id, \"with data:\", tenantData);\n            // Filter out fields that don't exist in the RENT_tenants table\n            const { security_deposit, payment_history, late_fees_owed, late_status, last_payment_date, rent_cadence, ...filteredData } = tenantData;\n            // Include monthly_rent in the tenant update since it exists in the RENT_tenants table\n            if (tenantData.monthly_rent !== undefined) {\n                filteredData.monthly_rent = tenantData.monthly_rent;\n            }\n            console.log(\"TenantsService.update - Filtered data:\", filteredData);\n            // Update the tenant\n            const { data: updatedTenantData, error: tenantError } = await supabase.from(\"RENT_tenants\").update(filteredData).eq(\"id\", id).select(\"*\").single();\n            if (tenantError) {\n                console.error(\"TenantsService.update - Supabase error:\", tenantError);\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(tenantError));\n            }\n            // If monthly_rent was updated, also update the corresponding lease\n            if (tenantData.monthly_rent !== undefined && tenantData.monthly_rent !== null) {\n                try {\n                    // Find the active lease for this tenant\n                    const { data: leases, error: leaseError } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", id).eq(\"status\", \"active\").order(\"created_at\", {\n                        ascending: false\n                    }).limit(1);\n                    if (!leaseError && leases && leases.length > 0) {\n                        const activeLease = leases[0];\n                        console.log(\"TenantsService.update - Updating lease rent:\", activeLease.id, \"to:\", tenantData.monthly_rent);\n                        // Update the lease rent\n                        const { error: leaseUpdateError } = await supabase.from(\"RENT_leases\").update({\n                            rent: tenantData.monthly_rent\n                        }).eq(\"id\", activeLease.id);\n                        if (leaseUpdateError) {\n                            console.warn(\"TenantsService.update - Failed to update lease rent:\", leaseUpdateError);\n                        } else {\n                            console.log(\"TenantsService.update - Successfully updated lease rent\");\n                        }\n                    }\n                } catch (leaseUpdateError) {\n                    console.warn(\"TenantsService.update - Error updating lease rent:\", leaseUpdateError);\n                }\n            }\n            // Fetch the updated tenant with leases\n            const { data: updatedTenant, error: fetchError } = await supabase.from(\"RENT_tenants\").select(\"\\n          *,\\n          leases:RENT_leases(*)\\n        \").eq(\"id\", id).single();\n            if (fetchError) {\n                console.error(\"TenantsService.update - Error fetching updated tenant:\", fetchError);\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(fetchError));\n            }\n            return (0, client_1.createApiResponse)(updatedTenant);\n        } catch (error) {\n            console.error(\"TenantsService.update - Unexpected error:\", error);\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Delete a tenant\n     */ static async delete(id) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const { error } = await supabase.from(\"RENT_tenants\").delete().eq(\"id\", id);\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            return (0, client_1.createApiResponse)(true);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Get paginated tenants\n     */ static async getPaginated() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, filters = arguments.length > 2 ? arguments[2] : void 0;\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const offset = (page - 1) * limit;\n            let query = supabase.from(\"RENT_tenants\").select(\"*\", {\n                count: \"exact\"\n            }).order(\"created_at\", {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            if (filters === null || filters === void 0 ? void 0 : filters.property_id) {\n                query = query.eq(\"property_id\", filters.property_id);\n            }\n            if ((filters === null || filters === void 0 ? void 0 : filters.is_active) !== undefined) {\n                query = query.eq(\"is_active\", filters.is_active);\n            }\n            if (filters === null || filters === void 0 ? void 0 : filters.late_status) {\n                query = query.eq(\"late_status\", filters.late_status);\n            }\n            const { data: tenants, error, count } = await query;\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // Fetch properties and leases separately\n            const tenantsWithRelations = await Promise.all(tenants.map(async (tenant)=>{\n                // Fetch property\n                let property = null;\n                if (tenant.property_id) {\n                    const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address\").eq(\"id\", tenant.property_id).single();\n                    property = propData;\n                }\n                // Fetch leases\n                const { data: leasesData } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", tenant.id).order(\"lease_start_date\", {\n                    ascending: false\n                });\n                return {\n                    ...tenant,\n                    properties: property,\n                    leases: leasesData || []\n                };\n            }));\n            return (0, client_1.createApiResponse)({\n                data: tenantsWithRelations,\n                total: count || 0,\n                page,\n                limit,\n                hasMore: offset + limit < (count || 0)\n            });\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Search tenants\n     */ static async search(searchTerm) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const { data: tenants, error } = await supabase.from(\"RENT_tenants\").select(\"*\").or(\"first_name.ilike.%\".concat(searchTerm, \"%,last_name.ilike.%\").concat(searchTerm, \"%,email.ilike.%\").concat(searchTerm, \"%\")).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // Fetch properties and leases separately\n            const tenantsWithRelations = await Promise.all(tenants.map(async (tenant)=>{\n                // Fetch property\n                let property = null;\n                if (tenant.property_id) {\n                    const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address\").eq(\"id\", tenant.property_id).single();\n                    property = propData;\n                }\n                // Fetch leases\n                const { data: leasesData } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", tenant.id).order(\"lease_start_date\", {\n                    ascending: false\n                });\n                return {\n                    ...tenant,\n                    properties: property,\n                    leases: leasesData || []\n                };\n            }));\n            return (0, client_1.createApiResponse)(tenantsWithRelations);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Get active tenants\n     */ static async getActive() {\n        return this.getAll({\n            is_active: true\n        });\n    }\n    /**\n     * Get late tenants\n     */ static async getLate() {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const { data: tenants, error } = await supabase.from(\"RENT_tenants\").select(\"*\").neq(\"late_status\", \"on_time\").order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // Fetch properties and leases separately\n            const tenantsWithRelations = await Promise.all(tenants.map(async (tenant)=>{\n                // Fetch property\n                let property = null;\n                if (tenant.property_id) {\n                    const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address\").eq(\"id\", tenant.property_id).single();\n                    property = propData;\n                }\n                // Fetch leases\n                const { data: leasesData } = await supabase.from(\"RENT_leases\").select(\"*\").eq(\"tenant_id\", tenant.id).order(\"lease_start_date\", {\n                    ascending: false\n                });\n                return {\n                    ...tenant,\n                    properties: property,\n                    leases: leasesData || []\n                };\n            }));\n            return (0, client_1.createApiResponse)(tenantsWithRelations);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Get tenants by property\n     */ static async getByProperty(propertyId) {\n        return this.getAll({\n            property_id: propertyId\n        });\n    }\n    /**\n     * Record a payment for a tenant\n     */ static async recordPayment(tenantId, paymentData) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            // First, get the current tenant with property information\n            const { data: currentTenant, error: getError } = await supabase.from(\"RENT_tenants\").select(\"*\").eq(\"id\", tenantId).single();\n            if (getError) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(getError));\n            }\n            if (!currentTenant) {\n                return (0, client_1.createApiResponse)(null, \"Tenant not found\");\n            }\n            // Fetch property data separately\n            let property = null;\n            if (currentTenant.property_id) {\n                const { data: propData } = await supabase.from(\"RENT_properties\").select(\"id, name, address, notes, monthly_rent\").eq(\"id\", currentTenant.property_id).single();\n                property = propData;\n            }\n            // TODO: Implement payment recording logic when database schema is updated\n            // For now, just return the tenant as-is\n            return (0, client_1.createApiResponse)(currentTenant);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Get late tenants with detailed information using existing database structure\n     */ static async getLateTenants() {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const { data: tenants, error } = await supabase.from(\"RENT_tenants\").select(\"*\").eq(\"is_active\", true) // Only check active tenants\n            .order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            // TODO: Implement late tenant logic when database schema is updated\n            // For now, return empty array\n            return (0, client_1.createApiResponse)([]);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Calculate total amount due for a tenant using new pay period logic\n     */ static calculateTotalDue(tenant) {\n        if (!tenant.properties) {\n            // TODO: Implement total due calculation when database schema is updated\n            return 0;\n        }\n        const latePaymentInfo = this.calculateTotalLatePayments(tenant, tenant.properties);\n        return latePaymentInfo.totalDue;\n    }\n    /**\n     * Calculate days late based on last payment date\n     */ static calculateDaysLate(lastPaymentDate) {\n        if (!lastPaymentDate) return 0;\n        const lastPayment = new Date(lastPaymentDate);\n        const today = new Date();\n        const diffTime = Math.abs(today.getTime() - lastPayment.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return diffDays;\n    }\n    /**\n     * Calculate late periods based on days late and rent cadence\n     */ static calculateLatePeriods(tenant, daysLate) {\n        if (!tenant.leases || tenant.leases.length === 0) return 0;\n        const cadence = tenant.leases[0].rent_cadence || \"monthly\";\n        const normalizedCadence = cadence.toLowerCase().trim();\n        switch(normalizedCadence){\n            case \"weekly\":\n                return Math.ceil(daysLate / 7);\n            case \"bi-weekly\":\n            case \"biweekly\":\n            case \"bi_weekly\":\n                return Math.ceil(daysLate / 14);\n            case \"monthly\":\n            default:\n                return Math.ceil(daysLate / 30);\n        }\n    }\n    /**\n     * Calculate late fees based on late periods and rent cadence\n     */ static calculateLateFees(tenant, latePeriods) {\n        if (!tenant.leases || tenant.leases.length === 0) return 0;\n        const cadence = tenant.leases[0].rent_cadence || \"monthly\";\n        const normalizedCadence = cadence.toLowerCase().trim();\n        let lateFeePerPeriod = 0;\n        switch(normalizedCadence){\n            case \"weekly\":\n                lateFeePerPeriod = 10;\n                break;\n            case \"bi-weekly\":\n            case \"biweekly\":\n            case \"bi_weekly\":\n                lateFeePerPeriod = 20;\n                break;\n            case \"monthly\":\n            default:\n                lateFeePerPeriod = 50;\n                break;\n        }\n        return latePeriods * lateFeePerPeriod;\n    }\n    /**\n     * Calculate total due including late fees\n     */ static calculateTotalDueWithLateFees(tenant, lateFees) {\n        const baseRent = tenant.leases && tenant.leases.length > 0 ? tenant.leases[0].rent : 0; // TODO: Implement base rent calculation when database schema is updated\n        return baseRent + lateFees;\n    }\n    /**\n     * Calculate what a tenant actually owes using the currently_paid_up_date\n     * This is the new improved calculation system\n     */ static calculateTenantOwedAmount(tenant) {\n        if (!tenant.leases || tenant.leases.length === 0) {\n            // TODO: Implement calculation when database schema is updated\n            return {\n                totalOwed: 0,\n                totalLateFees: 0,\n                missedPeriods: 0,\n                missedPayments: []\n            };\n        }\n        const activeLease = tenant.leases[0];\n        if (!activeLease.lease_start_date || !activeLease.rent) {\n            return {\n                totalOwed: 0,\n                totalLateFees: 0,\n                missedPeriods: 0,\n                missedPayments: []\n            };\n        }\n        // TODO: Implement full calculation when database schema is updated\n        return {\n            totalOwed: 0,\n            totalLateFees: 0,\n            missedPeriods: 0,\n            missedPayments: []\n        };\n    }\n    /**\n     * Calculate total days late for a tenant\n     */ static calculateTotalDaysLate(tenant) {\n        if (!tenant.leases || tenant.leases.length === 0) {\n            return 0;\n        }\n        const activeLease = tenant.leases[0];\n        if (!activeLease.lease_start_date || !activeLease.rent_cadence) {\n            return 0;\n        }\n        const rentCadence = activeLease.rent_cadence;\n        // TODO: Implement full calculation when database schema is updated\n        // For now, return 0 since we don't have access to payment history\n        return 0;\n    }\n    /**\n     * Get the late fee amount for a specific rent cadence\n     */ static getLateFeeAmount(cadence) {\n        const normalizedCadence = cadence.toLowerCase().trim();\n        switch(normalizedCadence){\n            case \"weekly\":\n                return 10;\n            case \"bi-weekly\":\n            case \"biweekly\":\n            case \"bi_weekly\":\n                return 20;\n            case \"monthly\":\n            default:\n                return 45;\n        }\n    }\n    /**\n     * Extract rent cadence from property notes\n     */ static extractRentCadence(notes) {\n        if (!notes) return \"monthly\";\n        const cadenceMatch = notes.match(/Rent cadence:\\s*(\\w+)/i);\n        return cadenceMatch ? cadenceMatch[1] : \"monthly\";\n    }\n    /**\n     * Calculate the number of days between two dates\n     */ static daysBetween(date1, date2) {\n        const d1 = new Date(date1);\n        const d2 = new Date(date2);\n        const diffTime = Math.abs(d2.getTime() - d1.getTime());\n        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    }\n    /**\n     * Get the expected payment date for a specific pay period\n     */ static getExpectedPaymentDate(leaseStartDate, payPeriodIndex, cadence) {\n        const startDate = new Date(leaseStartDate);\n        const normalizedCadence = cadence.toLowerCase().trim();\n        switch(normalizedCadence){\n            case \"weekly\":\n                return new Date(startDate.getTime() + payPeriodIndex * 7 * 24 * 60 * 60 * 1000);\n            case \"bi-weekly\":\n            case \"biweekly\":\n            case \"bi_weekly\":\n                return new Date(startDate.getTime() + payPeriodIndex * 14 * 24 * 60 * 60 * 1000);\n            case \"monthly\":\n            default:\n                const result = new Date(startDate);\n                result.setMonth(result.getMonth() + payPeriodIndex);\n                return result;\n        }\n    }\n    /**\n     * Get the last N expected payment dates for a tenant\n     */ static getLastExpectedPaymentDates(leaseStartDate, cadence) {\n        let count = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n        const dates = [];\n        const today = new Date();\n        // Find the most recent expected payment date\n        let currentPeriod = 0;\n        let currentDate = this.getExpectedPaymentDate(leaseStartDate, currentPeriod, cadence);\n        while(currentDate <= today && currentPeriod < count * 2){\n            currentPeriod++;\n            currentDate = this.getExpectedPaymentDate(leaseStartDate, currentPeriod, cadence);\n        }\n        // Get the last N periods\n        for(let i = Math.max(0, currentPeriod - count); i < currentPeriod; i++){\n            dates.push(this.getExpectedPaymentDate(leaseStartDate, i, cadence));\n        }\n        return dates;\n    }\n    /**\n     * Calculate late fees for a specific pay period\n     */ static calculateLateFeesForPeriod(expectedDate, paymentHistory, cadence, rentAmount) {\n        const lateFeeAmount = this.getLateFeeAmount(cadence);\n        // Find payments for this period (within 5 days of expected date)\n        const periodStart = new Date(expectedDate);\n        periodStart.setDate(periodStart.getDate() - 2); // Allow 2 days early\n        const periodEnd = new Date(expectedDate);\n        periodEnd.setDate(periodEnd.getDate() + 5); // 5 days grace period\n        const periodPayments = paymentHistory.filter((payment)=>{\n            const paymentDate = new Date(payment.date);\n            return paymentDate >= periodStart && paymentDate <= periodEnd && payment.status === \"completed\";\n        });\n        const totalPaid = periodPayments.reduce((sum, payment)=>sum + payment.amount, 0);\n        const outstanding = Math.max(0, rentAmount - totalPaid);\n        // Check if payment is late (after grace period)\n        const lastPaymentDate = periodPayments.length > 0 ? new Date(Math.max(...periodPayments.map((p)=>new Date(p.date).getTime()))) : null;\n        if (!lastPaymentDate || lastPaymentDate > periodEnd) {\n            // Payment is late\n            const daysLate = lastPaymentDate ? this.daysBetween(periodEnd, lastPaymentDate) : this.daysBetween(periodEnd, new Date());\n            return {\n                isLate: true,\n                daysLate: Math.max(0, daysLate),\n                lateFees: outstanding > 0 ? lateFeeAmount : 0,\n                totalPaid,\n                outstanding\n            };\n        }\n        return {\n            isLate: false,\n            daysLate: 0,\n            lateFees: 0,\n            totalPaid,\n            outstanding\n        };\n    }\n    /**\n     * Calculate total late payments for a tenant\n     */ static calculateTotalLatePayments(tenant, property) {\n        // TODO: Implement late payment calculation when database schema is updated\n        return {\n            totalDue: 0,\n            totalLateFees: 0,\n            latePeriods: 0\n        };\n    }\n    /**\n     * Check if a tenant is late on payments\n     */ static isTenantLate(tenant, property) {\n        // TODO: Implement late payment check when database schema is updated\n        return false;\n    }\n    /**\n     * Create tenant by property address\n     */ static async createByPropertyAddress(tenantData) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            // First, find the property by address\n            const { data: property, error: propertyError } = await supabase.from(\"RENT_properties\").select(\"id, monthly_rent\").ilike(\"address\", \"%\".concat(tenantData.property_address, \"%\")).single();\n            if (propertyError) {\n                return (0, client_1.createApiResponse)(null, \"Property not found with address: \".concat(tenantData.property_address));\n            }\n            // Create tenant with property_id\n            const { property_address, ...tenantCreateData } = tenantData;\n            const tenantDataWithProperty = {\n                ...tenantCreateData,\n                property_id: property.id,\n                monthly_rent: tenantData.monthly_rent || property.monthly_rent\n            };\n            const { data, error } = await supabase.from(\"RENT_tenants\").insert([\n                tenantDataWithProperty\n            ]).select(\"*, RENT_properties(name, address)\").single();\n            if (error) {\n                return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n            }\n            return (0, client_1.createApiResponse)(data);\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Bulk create tenants by property address\n     */ static async bulkCreateByPropertyAddress(tenantsData) {\n        try {\n            const supabase = (0, client_1.getSupabaseClient)();\n            const created = [];\n            const errors = [];\n            for (const tenantData of tenantsData){\n                try {\n                    const result = await this.createByPropertyAddress(tenantData);\n                    if (result.success && result.data) {\n                        created.push(result.data);\n                    } else {\n                        errors.push(\"Failed to create tenant \".concat(tenantData.first_name, \" \").concat(tenantData.last_name, \": \").concat(result.error));\n                    }\n                } catch (error) {\n                    errors.push(\"Error creating tenant \".concat(tenantData.first_name, \" \").concat(tenantData.last_name, \": \").concat(error));\n                }\n            }\n            return (0, client_1.createApiResponse)({\n                created,\n                errors\n            });\n        } catch (error) {\n            return (0, client_1.createApiResponse)(null, (0, client_1.handleSupabaseError)(error));\n        }\n    }\n    /**\n     * Calculate total amount owed by a tenant\n     */ static calculateTotalAmountOwed(tenant) {\n        // TODO: Implement total amount calculation when database schema is updated\n        // For now, return 0 since these fields don't exist in the current schema\n        return 0;\n    }\n    /**\n     * Get the rent amount for a tenant\n     */ static getRentAmount(tenant) {\n        // TODO: Implement rent amount calculation when database schema is updated\n        // For now, return 0 since monthly_rent field doesn't exist in the current schema\n        return 0;\n    }\n    /**\n     * Calculate days since last payment\n     */ static calculateDaysSinceLastPayment(tenant) {\n        // TODO: Implement days since last payment calculation when database schema is updated\n        return 0;\n    }\n    /**\n     * Calculate days since lease start\n     */ static calculateDaysSinceLeaseStart(tenant) {\n        // TODO: Implement days since lease start calculation when database schema is updated\n        return 0;\n    }\n}\nexports.TenantsService = TenantsService;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../packages/api/dist/services/tenants.js\n"));

/***/ })

});